OperationPrompts:
  ColumnCatogerizer: >
    Given a list of column names, accurately categorize each column into the following schema, along with the thought process, and list down all the columns from data in all_columns use message history in thought process as well if available:
    column_categories: 
      date_col: str  
      product_col: str  
      sales_cols: List[str]  
      oos_col: str  
      media_spends_cols: List[str]  
      media_clicks_cols: List[str]  
      control_variables: List[str]
    thought_process: str
    all_columns: List[str]

    # Instructions:
      - Use semantic cues in column names (e.g., "date", "clicks", "spends", "units", "price", "oos") to assign columns accurately.
      - Each column must belong to exactly one category, no overlaps allowed.
      - All columns must be included in the classification.
      - When multiple columns belong to a category (e.g., sales metrics, media spends), group them as lists.
      - date_col, product_col, and oos_col are single string entries (one column each).
      - Distinguish closely related categories by keywords, e.g.:
        - Media spends: columns containing "spends", "budget", "cost"
        - Media clicks: columns containing "clicks", "ctr"
        - Sales columns: terms like "units_sold", "revenue", "price"
        - Control variables: columns that reflect external or modeling factors like "trend", "seasonality", "event", "intercept", etc.

  TypeChecks: >
    In the context of market mix modeling, check if the data types of the columns are appropriate based on the domain, column descriptions, and data samples. 
    If any column has an incorrect data type, briefly explain what is wrong and suggest the correct type.

    Domain context: {domain_context}
    Column context: {column_context}
    Column info: {column_info}
    
    Provide a very short, natural language explanation highlighting any mismatches or confirming that all types are appropriate in less than 20 words.

AgentPrompts:
  ApprovalNode: >
    Act as an expert query interpreter. 
    For each user query, analyze the intent and generate your thought process describing the next steps. 
    Return a response with these fields:
      - category: one of ['approve', 'retry', 'retry with suggestion']
      - feedback: description of changes needed (if any), as mentioned by user
      - thought: your reasoning about what needs to be done next